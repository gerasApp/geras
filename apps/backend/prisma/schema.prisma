datasource db {
  provider = "sqlite" // ‚Üê cambia a "postgresql" o "mysql" y listo
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * --- ENUMS ---
 */
enum AssetType {
  STOCK
  BOND
  ETF
  CRYPTO
  MUTUAL_FUND
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
}

enum PlanType {
  FINAL_AMOUNT
  RENT
}

/**
 * --- MODEL ---
 */
model Asset {
  id               Int       @id @default(autoincrement()) // simple para SQLite
  name             String
  type             AssetType
  historicalReturn Float
  risk             RiskLevel
  description      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  planId           Int?      // Optional foreign key
  plan             Plan?     @relation(fields: [planId], references: [id])
  userId           String?      
  user             User?     @relation(fields: [userId], references: [id])

  @@map("assets") // nombre real de tabla
}

model Plan {
  id                  Int      @id @default(autoincrement())
  userId              String      //@default(1) //por ahora, solo un usuario
  user                User     @relation(fields: [userId], references: [id])
  name                String
  code                String   @unique
  objective           Int
  type                PlanType
  initialAmount       Int
  duration            Int
  monthlyContribution Int
  createdAt           DateTime @default(now())
  expectedReturnRate  Float
  assets              Asset[]  // Add the reverse relation

  @@map("plan")
}

model User {
  id        String      @id @default(cuid()) //@default(autoincrement())
  name      String
  email     String   @unique

  plans     Plan[]   // Relation to Plan
  assets    Asset[]  // Relation to Asset
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}